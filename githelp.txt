安装完成后，还需要最后一步设置，在命令行输入：
配置全局变量
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

配置ssh-key
ssh-keygen -t rsa -C "用户名" 
cat ~/.ssh/id_rsa.pub  复制其内容到github.com 自己用户名下的settings里面

配置git命令自动补全
https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash

下载git-completion.bash 并创建~/.git-completion.bash 
vim ~/.bashrc
 添加 source ~/.git-completion.bash


创建版本库有两种方式：
第一种：
1.先在本地将某（空/非空）个文件夹初始化成git可以管理的仓库，
$ mkdir learngit
$ cd learngit
$ git init
Initialized empty Git repository in /home/learngit/.git/
2.再github.com远程建立相同名称的远程仓库，然后将本地的仓库和远程的关联到一起
$ git remote add origin git@github.com:theluman/learngit.git

第二种：（推荐使用）
1.先远程建立仓库
2.再克隆到本地,可多台机器克隆
$ git clone git@github.com:theluman/learngit.git

修改本地工作区文件-->将修过增加到暂存区-->就修改提交到分支-->将分支推送到远程库
vim abc.txt ------- git add abc.txt ----- git commit -m ""----【git push -u origin master（第一次）】
vim bcd.txt           git add bcd.txt     git commit -m ""     git push origin master（非第一次）
vim def.txt           git add def.txt     git commit -m ""
                                         【 git commit -am ""】

git commit -m "" -m 是填写修改说明
git commit -am ""  -a是将前几次的add一次性添加到分之
git push -u origin master -u 是第一次使用，推送并将远程master与本地master联系到一起

查看/对比文件
git status 查看修改/提交等状态
git diff  工作区与暂存区文件差异  git diff -- filename
git diff --cached 暂存区与本地库文件差异 
git diff HEAD 工作区与本地库文件差异 git diff HEAD -- filename

版本回退
HEAD指向当前版本 HEAD^上一个版本 HEAD^^上两个版本 HEAD^^^上三个 HEAD~100上100个
git log 查看提交历史，确定回退版本号commit_id，取前几位
$ git reset --hard HEAD^  回到上一个版本
$ git reset --hard HEAD^^ 回到上两个版本
$ git reset --hard commit_id 回退到某个版本号
git reflog  查看回退命令记录，找到未来的本版号，以便回到未来

撤销修改
git checkout -- filename 丢弃工作区的修改
命令git checkout -- filename意思就是，把filename文件在工作区的修改全部撤销，这里有两种情况：
一种是filename自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是filename已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git reset HEAD filename 把暂存区的修改撤销掉，重新放回工作区
git reset HEAD filename 可以把暂存区的修改撤销掉，重新放回工作区
git checkout -- filename 丢弃工作区的修改
世界干净了

删除文件
$ rm test.txt  删除工作区文件
$ git rm test.txt 删除暂存区文件
$ git commit -m "remove test.txt" 将删除提交到本地分之
$ git checkout -- test.txt 用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

分之
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

配置别名 
用别名st代替 status
git config --global alias.st status

.git/config
.gitconfig    
配置文件 可删除别名
